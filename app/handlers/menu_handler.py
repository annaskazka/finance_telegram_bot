from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.models.user_state import UserState
from app.reports.period_type import PeriodType
from app.reports.report_generator import ReportGenerator


class MenuHandler:
    def __init__(self, user_manager):
        self.user_manager = user_manager
        self.report_generator = ReportGenerator()
        self.user_selection = {}
        self.report_mode = {}

    def get_main_menu(self):
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç", callback_data="show_report"
                    )
                ],
            ]
        )

    def get_category_menu(self):
        categories = ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ó–¥–æ—Ä–æ–≤—å–µ", "–î–æ—Å—É–≥", "–î—Ä—É–≥–æ–µ"]
        inline_keyboard = [
            [InlineKeyboardButton(text=cat, callback_data=f"cat_{cat.lower()}")]
            for cat in categories
        ]
        inline_keyboard.append(
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        )
        return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    def get_report_menu(self):
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –î–µ–Ω—å", callback_data="report_day")],
                [InlineKeyboardButton(text="üìÜ –ú–µ—Å—è—Ü", callback_data="report_month")],
                [InlineKeyboardButton(text="üóìÔ∏è –ì–æ–¥", callback_data="report_year")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
            ]
        )

    def create_calendar(self):
        buttons = [
            InlineKeyboardButton(text=str(i), callback_data=f"day:{i}")
            for i in range(1, 32)
        ]
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[buttons[i : i + 7] for i in range(0, 31, 7)]
        )
        return keyboard

    def create_month_keyboard(self) -> InlineKeyboardMarkup:
        buttons = [
            InlineKeyboardButton(text=str(i), callback_data=f"month:{i}")
            for i in range(1, 13)  # 12 –º–µ—Å—è—Ü–µ–≤
        ]

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[buttons[i : i + 4] for i in range(0, len(buttons), 4)]
        )
        return keyboard

    def create_year_keyboard(
        self, start: int = 2020, end: int = 2025
    ) -> InlineKeyboardMarkup:
        buttons = [
            InlineKeyboardButton(text=str(y), callback_data=f"year:{y}")
            for y in range(start, end + 1)
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        return keyboard

    def handle_command(self, user_id: int, command: str):
        user = self.user_manager.get_user(user_id)
        if command == "/start":
            user.state = UserState.IDLE
            return (
                "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üí∞. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                self.get_main_menu(),
            )

        return ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", self.get_main_menu())

    def handle_callback(self, user_id: int, callback_data: str):
        user = self.user_manager.get_user(user_id)

        if user_id not in self.user_selection:
            self.user_selection[user_id] = {"day": None, "month": None, "year": None}

        if callback_data == "back_to_main":
            user.state = UserState.IDLE
            return ("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", self.get_main_menu())

        if callback_data == "add_expense":
            user.state = UserState.CHOOSING_CATEGORY
            return ("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", self.get_category_menu())

        if callback_data.startswith("cat_"):
            category = callback_data.split("cat_", 1)[1]
            user.selected_category = category.capitalize()
            user.state = UserState.ENTERING_AMOUNT
            return (
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user.selected_category}\n–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 199.99):",
                None,
            )

        if callback_data == "show_report":

            self.user_selection[user_id] = {"day": None, "month": None, "year": None}
            self.report_mode[user_id] = None
            return ("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞:", self.get_report_menu())

        if callback_data == "report_day":
            self.report_mode[user_id] = PeriodType.DAY
            self.user_selection[user_id] = {"day": None, "month": None, "year": None}
            return ("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", self.create_calendar())

        if callback_data == "report_month":
            self.report_mode[user_id] = PeriodType.MONTH
            self.user_selection[user_id] = {"day": None, "month": None, "year": None}
            return ("–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü:", self.create_month_keyboard())

        if callback_data == "report_year":
            self.report_mode[user_id] = PeriodType.YEAR
            self.user_selection[user_id] = {"day": None, "month": None, "year": None}
            return ("–í—ã–±–µ—Ä–∏ –≥–æ–¥:", self.create_year_keyboard())

        if callback_data == "report_back":

            return ("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞:", self.get_report_menu())

        if callback_data.startswith("day:"):
            day = int(callback_data.split(":")[1])
            self.user_selection[user_id]["day"] = day

            return (
                f"–î–µ–Ω—å {day} –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü:",
                self.create_month_keyboard(),
            )

        if callback_data.startswith("month:"):
            month = int(callback_data.split(":")[1])
            self.user_selection[user_id]["month"] = month
            mode = self.report_mode.get(user_id)
            if mode == PeriodType.MONTH:

                return (
                    f"–ú–µ—Å—è—Ü {month} –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≥–æ–¥:",
                    self.create_year_keyboard(),
                )
            elif mode == PeriodType.DAY:

                return (
                    f"–ú–µ—Å—è—Ü {month} –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≥–æ–¥:",
                    self.create_year_keyboard(),
                )
            else:

                return ("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", self.get_report_menu())

        if callback_data.startswith("year:"):
            year = int(callback_data.split(":")[1])
            self.user_selection[user_id]["year"] = year

            sel = self.user_selection[user_id]
            mode = self.report_mode.get(user_id)

            if mode == PeriodType.DAY:
                if None in (sel["day"], sel["month"], sel["year"]):
                    return ("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥.", None)
                report_text = self.report_generator.generate_report(
                    user=user,
                    period_type=PeriodType.DAY,
                    day=sel["day"],
                    month=sel["month"],
                    year=sel["year"],
                )
            elif mode == PeriodType.MONTH:
                if None in (sel["month"], sel["year"]):
                    return ("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü –∏ –≥–æ–¥.", None)
                report_text = self.report_generator.generate_report(
                    user=user,
                    period_type=PeriodType.MONTH,
                    month=sel["month"],
                    year=sel["year"],
                )
            elif mode == PeriodType.YEAR:
                if sel["year"] is None:
                    return ("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏ –≥–æ–¥.", None)
                report_text = self.report_generator.generate_report(
                    user=user, period_type=PeriodType.YEAR, year=sel["year"]
                )
            else:
                return ("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞.", self.get_report_menu())

            return (report_text, self.get_main_menu())

        return ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", self.get_main_menu())
